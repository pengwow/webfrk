/**
 * Copyright (2018, ) Institute of Software, Chinese Academy of Sciences
 */
package com.github.webfrk;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;



/**
 * @author wuheng(@iscas.ac.cn)
 * @since 2019/2/20
 * 
 *        <p>
 *        The {@code ApplicationServer} class is generated by Spring cloud
 *        framework. You can invoke the main method to start this program for
 *        debugging in development, or running in production
 * 
 *        <p>
 *        Note: do not modify this class
 */
@SpringBootApplication
@EnableAutoConfiguration
@ComponentScan(basePackages= {"com.github.webfrk", "dev.examples.services"})
@MapperScan(basePackages= {"dev.examples.mappers"})
public class ApplicationServer implements WebMvcConfigurer {

	/**
	 * program entry point
	 * 
	 * @param args default is null
	 */
	public static void main(String[] args) {
		SpringApplication.run(ApplicationServer.class, args);
	}
	@Override
	public void addInterceptors(InterceptorRegistry registry) {
		registry.addInterceptor(new CorsInterceptor())
						.addPathPatterns("/**");
	}
	
	/**
	 * @author xuyuanjia2017@otcaix.iscas.ac.cn
	 * @since 2019/10/29
	 *
	 */
	public static class CorsInterceptor implements HandlerInterceptor {

		private static Logger m_logger = Logger.getLogger(CorsInterceptor.class.getName());

		public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
				throws Exception {
			String origin = request.getHeader("Origin");
			m_logger.info("RequestURI :" + request.getRequestURI());
			// 解决跨域请求
			response.setHeader("Access-Control-Allow-Origin", origin);
			response.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, " +
					"WG-App-Version, WG-Device-Id, WG-Network-Type, WG-Vendor, WG-OS-Type, WG-OS-Version, WG-Device-Model, WG-CPU, WG-Sid, WG-App-Id, WG-Token, X-token");
			response.setHeader("Access-Control-Allow-Methods", "POST, GET");
			response.setHeader("Access-Control-Allow-Credentials", "true");
			response.setContentType("application/json;charset=UTF-8");
				return true;
		}

		public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
				ModelAndView modelAndView) throws Exception {
			m_logger.info("CorsInterceptor.postHandle()");
		}

		/**
		 * 在Controller方法后进行拦截
		 */
		public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
				throws Exception {
			m_logger.info("CorsInterceptor.afterCompletion()");
		}
	}

}
